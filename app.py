from email.policy import default
from operator import index
import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from streamlit_option_menu import option_menu

st.set_page_config(
     page_title="DASHBOARD - ESTADISTICAS APROBACION",
     page_icon="üêΩ",
     layout="wide",
     initial_sidebar_state="expanded"
 )

@st.cache(allow_output_mutation=True)
def cargar_datos():
    read_col = ['A√ëO','DEPARTAMENTO','MUNICIPIO','APROBACI√ìN', 'APROBACI√ìN_TRANSICI√ìN', 'APROBACI√ìN_PRIMARIA', 'APROBACI√ìN_SECUNDARIA', 'APROBACI√ìN_MEDIA']
    df = pd.read_csv("MEN_ESTADISTICAS_EN_EDUCACION_EN_PREESCOLAR__B_SICA_Y_MEDIA_POR_MUNICIPIO_LIMPIO.csv",
        usecols=read_col
        )
    return df

def request_api(tipo_aprobacion, years):
  request_data = {"tipo_aprobacion": tipo_aprobacion,
                     "years": years}    

  data_cleaned = str(request_data).replace("'", '"')

  url_api = "https://api-modelos-aprobacion.herokuapp.com/predict"

  pred = requests.post(url=url_api, data=data_cleaned).text

  pred_df = pd.read_json(pred)
  return pred_df

def procesar_request(dataframe):
    dataframe['years'] = pd.to_datetime(dataframe['years']).dt.year
    a√±os = dataframe['years']
    aprobaciones = dataframe['aprobacion'].round(2)
    col1, col2, col3 = st.columns(3)
    resultado = ""
    for p in range(len(a√±os)):
        if p == 0:
            col1.metric('A√±o '+str(a√±os[0]), str(aprobaciones[0])+'%')
        elif p == 1:
            diferencia = aprobaciones[0] - aprobaciones[1]
            col2.metric('A√±o '+str(a√±os[1]), str(aprobaciones[1])+'%', '-'+str(diferencia.round(2))+'%')
        elif p == 2:
            diferencia2 = aprobaciones[1] - aprobaciones[2]
            col3.metric('A√±o '+str(a√±os[2]), str(aprobaciones[2])+'%', '-'+str(diferencia2.round(2))+'%')
    return resultado

# Using object notation
df = cargar_datos().copy()
with st.sidebar: 
    genre_bar = option_menu(
        menu_title = "NAVEGACI√ìN",
        options = ['P√°gina principal','Exploraci√≥n', 'Predicci√≥n'],
        icons =["house", "search","cpu"],
        menu_icon = "cast",
        default_index =0,
    )


if genre_bar == 'P√°gina principal':
    st.title("Estad√≠sticas de aprobaci√≥n escolar üìä (DASHBOARD) üìä" ) 
    st.write('üìå Sobre nosotros')
    st.write('Este DASHBOARD fue elaborado con fines acad√©micos, con el prop√≥sito de mostrar cual es la tasa de aprobaci√≥n escolar en todos los departamentos de Colombia. Nuestro equipo est√° conformado por: Juan Ramos, Jerem√≠as Palacio, Jes√∫s Hoyos, Camilo Ganem y Yesica Durango')
    agree = st.checkbox('Mostrar datos')

    if agree:
        st.dataframe(df)
    agree_columns = st.checkbox('Columnas')
    if agree_columns:
        st.write(df.columns)

    genre = st.radio(
        "¬øQu√© dimensi√≥n quieres ver?",
        ('Filas', 'Columnas'))

    if genre == 'Filas':
        st.write('Cantidad de filas del Dataframe')
        st.markdown('**'+str(df.shape[0])+'**')
    else:
        st.write('Cantidad de columnas del Dataframe')
        st.markdown('**'+str(df.shape[1])+'**')

    agree_describe = st.checkbox('üìà Estad√≠sticas Generales üìà')
    if agree_describe: 
        st.write(df.describe())

elif genre_bar == 'Exploraci√≥n':

    st.sidebar.header('Ingrese los datos')
    DEPARTAMENTO = st.sidebar.multiselect("Selecciona departamento:", options=df['DEPARTAMENTO'].unique() , default =df['DEPARTAMENTO'].unique() )
    df_selection = df.query("DEPARTAMENTO == @DEPARTAMENTO")

    # st.dataframe(df_selection)
    st.title("üîç Exploraci√≥n de datos(graficas)") 

    

    dataframe_depatamento = (
    df_selection.groupby(by=['DEPARTAMENTO']).mean()[['APROBACI√ìN']]
    )
    
    fig = px.bar(
        dataframe_depatamento,
        x = "APROBACI√ìN",
        y = dataframe_depatamento.index,
        orientation = "h",
        height=700, width = 1200,
        title= "<b> Nivel de aprobaci√≥n a nivel departamental </b>",
        color_discrete_sequence = ["#4573D1"] * len(dataframe_depatamento),
        template = "plotly_white"
        )

    fig.update_layout(
        plot_bgcolor="rgba(0,0,0,0)",
        xaxis = (dict(showgrid=False)),
        yaxis={'categoryorder':'total ascending'}
        )

    fig.update_xaxes(automargin=True)

    dataframe_a√±o = (
        df.groupby(by=['A√ëO']).mean()[['APROBACI√ìN','APROBACI√ìN_TRANSICI√ìN','APROBACI√ìN_PRIMARIA','APROBACI√ìN_SECUNDARIA', 'APROBACI√ìN_MEDIA']]
        )

    def grafica_time(dataframe,x,y,title):
        fig_2 = px.line(
            dataframe,
            x = x,
            y = y,
            title= "<b>"+title+"</b>",
            color_discrete_sequence = ["#4573D1"],
            template = "plotly_white"
        )
        
        fig_2.update_xaxes(
            rangeslider_visible = True,
            rangeselector = dict(buttons = list([dict(step = 'year' , stepmode = "backward",count = 1,label = '1 a√±o')])),
        )

        return fig_2
#
#
#

    st.plotly_chart(fig)   

    st.header('Graficas aprobacion a nivel nacional (2011 - 2020)')
    
    col1, col2= st.columns(2)
    st.plotly_chart(grafica_time(dataframe_a√±o,dataframe_a√±o.index,dataframe_a√±o['APROBACI√ìN_MEDIA'],'APROBACI√ìN MEDIA'))
    st.markdown('<p style="text-align: left; padding-left: 50px;"><b>Aprobaci√≥n Media:</b> La grafica de aprobaci√≥n estudiantil en el nivel educativo ‚ÄúMedia‚Äù con respecto a los a√±os (2011 ‚Äì 2020) muestra su pico m√°s alto en el a√±o 2014 con un 95.4%, as√≠ mismo su punto m√°s bajo fue en el 2020 con un 89.7%</p>', unsafe_allow_html=True)
    
    with col1:
        st.plotly_chart(grafica_time(dataframe_a√±o,dataframe_a√±o.index,dataframe_a√±o['APROBACI√ìN'],'APROBACI√ìN'))
        st.markdown('<p style="text-align: left; padding-left: 50px; margin-buttom: 60px;"><b>Aprobaci√≥n:</b> La grafica de aprobaci√≥n estudiantil "General" con respecto a los a√±os (2011 - 2020) muestra su pico mas alto en el a√±o 2014 con un 95.3%, as√≠ mismo el punto m√°s bajo fue en el 2020 con un 90.7%</p>', unsafe_allow_html=True)
        st.plotly_chart(grafica_time(dataframe_a√±o,dataframe_a√±o.index,dataframe_a√±o['APROBACI√ìN_PRIMARIA'],'APROBACI√ìN PRIMARIA'))
        st.markdown('<p style="text-align: left; padding-left: 50px;"><b>Aprobaci√≥n Primaria:</b> La grafica de aprobaci√≥n estudiantil en el nivel educativo ‚ÄúPrimaria‚Äù con respecto a los a√±os (2011 ‚Äì 2020) muestra su pico m√°s alto en el a√±o 2014 con un 96.1%, as√≠ mismo su punto m√°s bajo fue en el 2020 con un 93.3</p>', unsafe_allow_html=True)
    with col2:
        st.plotly_chart(grafica_time(dataframe_a√±o,dataframe_a√±o.index,dataframe_a√±o['APROBACI√ìN_TRANSICI√ìN'],'APROBACI√ìN TRANSICI√ìN'))
        st.markdown('<p style="text-align: left; padding-left: 50px;"><b>Aprobaci√≥n Transici√≥n:</b> La grafica de aprobaci√≥n estudiantil en el nivel educativo "Transici√≥n" con respecto a los a√±os (2011 ‚Äì 2020) muestra su pico m√°s alto en el a√±o 2014 con un 97.7%, as√≠ mismo su punto m√°s bajo fue en el 2012 con un 95.8%</p>', unsafe_allow_html=True)
        st.plotly_chart(grafica_time(dataframe_a√±o,dataframe_a√±o.index,dataframe_a√±o['APROBACI√ìN_SECUNDARIA'],'APROBACI√ìN SECUNDARIA'))
        st.markdown('<p style="text-align: left; padding-left: 50px;"><b>Aprobaci√≥n Secundaria:</b> La grafica de aprobaci√≥n estudiantil en el nivel educativo ‚ÄúSecundaria‚Äù con respecto a los a√±os (2011 ‚Äì 2020) muestra su pico m√°s alto en el a√±o 2014 con un 93.6%, as√≠ mismo el punto m√°s bajo fue en el 2020 con un 86.9%</p>', unsafe_allow_html=True)
        
    st.sidebar.title('üì© Contact us')

else: 
    st.sidebar.header('Ingrese los datos')  
    selectbox_aprobacion = st.sidebar.selectbox(
     'Seleccione la aprobaci√≥n',
     ('Aprobaci√≥n general', 'Aprobaci√≥n media', 'Aprobaci√≥n primaria', 'Aprobaci√≥n secundaria','Aprobaci√≥n transici√≥n'))
    

    selectbox_a√±o = st.sidebar.selectbox(
     'Seleccione el numero de a√±os',
     (1,2,3))

    st.header('Predicciones')
    #AL OPRIMIR EL BOTON HACE EL REQUETS A LA API Y LUEGO ES PROCESA LA RESPUESTA 
    if st.sidebar.button('Predicci√≥n'):
        
        if selectbox_aprobacion == 'Aprobaci√≥n general':
            pred = request_api(0, selectbox_a√±o)
            st.markdown('**Para aprobaci√≥n general en los a√±os:**')
            st.text(procesar_request(pred))    

        elif selectbox_aprobacion == 'Aprobaci√≥n media':
            pred = request_api(1, selectbox_a√±o)
            st.markdown('**Para la aprobaci√≥n en media**')
            st.text(procesar_request(pred))

        elif selectbox_aprobacion == 'Aprobaci√≥n primaria':
            pred = request_api(2, selectbox_a√±o)
            st.markdown('**Para la aprobaci√≥n en primaria**')
            st.text(procesar_request(pred))

        elif selectbox_aprobacion == 'Aprobaci√≥n secundaria':
            pred = request_api(3, selectbox_a√±o)
            st.markdown('**Para la aprobaci√≥n en secundaria**')
            st.text(procesar_request(pred))

        elif selectbox_aprobacion == 'Aprobaci√≥n transici√≥n':
            pred = request_api(4, selectbox_a√±o)
            st.markdown('**Para la aprobaci√≥n en transici√≥n**')
            st.text(procesar_request(pred))
        