# -*- coding: utf-8 -*-
"""clases.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXNczs17jnrs9V8svZ8IwxtfAHm_Q4gq
"""

from pydantic import BaseModel as BM
from pydantic import Field
from typing import Literal
from datetime import datetime
import joblib
import pandas as pd

#general = joblib.load("./drive/MyDrive/Diplomado/Modulo 5/aprobacion_media.pklaprobacion_general.pkl")
#media = joblib.load("./drive/MyDrive/Diplomado/Modulo 5/aprobacion_media.pkl")
#primaria = joblib.load("./drive/MyDrive/Diplomado/Modulo 5/aprobacion_primaria.pkl")
#secundaria = joblib.load("./drive/MyDrive/Diplomado/Modulo 5/aprobacion_secundaria.pkl")
#transicion = joblib.load("./drive/MyDrive/Diplomado/Modulo 5/aprobacion_transicion.pkl")

class InputModelo(BM):
    """
    Clase que define las entradas del modelo según las verá el usuario.
    """
    tipo_aprobacion: Literal["Aprobacion general", "Aprobacion media", "Aprobacion primaria", "Aprobacion secundaria","Aprobacion transicion"]
    years: int = Field(
        ge=1, le=3, description="Años futuros"
    )

    class Config:
        schema_extra = {
            "example": {
                "tipo_aprobacion": "Aprobacion general",
                "years": 1
            }
        }

class OutputModelo(BM):
    """
    Clase que define la salida del modelo según la verá el usuario.
    """

    years: datetime = Field()
    aprobacion: float = Field(ge=40.123323, le=100.000000)

    class Config:
        scheme_extra = {
            "example": {
                "years": 2021-1-1,
                "aprobacion": 90.374421
                
            }
        }

class APIModelBackEnd:
    def __init__(
        self,
        tipo_aprobacion,
        years,
    ):
        self.tipo_aprobacion = tipo_aprobacion
        self.years = years

    def _cargar_modelo(self, tipo_apro:str):
        if tipo_apro == "Aprobacion general":#Aprobacion general
          self.model = joblib.load("aprobacion_general.pkl")

        elif tipo_apro == "Aprobacion media":#Aprobacion media
          self.model = joblib.load("aprobacion_media.pkl")

        elif tipo_apro == "Aprobacion primaria":#Aprobacion primaria
           self.model = joblib.load("aprobacion_primaria.pkl")

        elif tipo_apro == "Aprobacion secundaria":#Aprobacion secundaria
           self.model = joblib.load("aprobacion_secundaria.pkl")

        else:#Aprobacion transicion
          self.model = joblib.load("aprobacion_transicion.pkl")

    def _preparar_datos(self):
        tipo_apro = self.tipo_aprobacion
        years = self.years
        return years, tipo_apro
    
    def predecir(self):
        year, tipo_apro = self._preparar_datos()
        self._cargar_modelo(tipo_apro)
        prediction = pd.DataFrame(self.model.forecast(year)).reset_index().rename(
                                  columns = {"index":"years",
                                             0:"aprobacion"}
                                 )
        return prediction.to_dict(orient="records")
